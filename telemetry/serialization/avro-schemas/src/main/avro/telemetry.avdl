@namespace("ru.yandex.practicum.kafka.telemetry.event")
protocol TelemetryProtocol {

	// --- Перечисления (Enums) ---

	enum DeviceTypeAvro {
		MOTION_SENSOR, TEMPERATURE_SENSOR, LIGHT_SENSOR, CLIMATE_SENSOR, SWITCH_SENSOR
	}

	enum ConditionTypeAvro {
		MOTION, LUMINOSITY, SWITCH, TEMPERATURE, CO2LEVEL, HUMIDITY
	}

	enum ConditionOperationAvro {
		EQUALS, GREATER_THAN, LOWER_THAN
	}

	enum ActionTypeAvro {
		ACTIVATE, DEACTIVATE, INVERSE, SET_VALUE
	}


	// --- Записи для данных от датчиков ---

	record ClimateSensorAvro {
		int temperature_c;
		int humidity;
		int co2_level;
	}

	record LightSensorAvro {
		int link_quality;
		int luminosity;
	}

	record MotionSensorAvro {
		int link_quality;
		boolean motion;
		int voltage;
	}

	record SwitchSensorAvro {
		boolean state;
	}

	record TemperatureSensorAvro {
		int temperature_c;
		int temperature_f;
	}


	// --- Записи для событий хабов ---

	record DeviceAddedEventAvro {
		string id;
		DeviceTypeAvro type;
	}

	record DeviceRemovedEventAvro {
		string id;
	}

	record ScenarioConditionAvro {
		string sensor_id;
		ConditionTypeAvro type;
		ConditionOperationAvro operation;
		union { null, boolean, int } value = null;
	}

	record DeviceActionAvro {
		string sensor_id;
		ActionTypeAvro type;
		union { null, int } value = null;
	}

	record ScenarioAddedEventAvro {
		string name;
		array<ScenarioConditionAvro> conditions;
		array<DeviceActionAvro> actions;
	}

	record ScenarioRemovedEventAvro {
		string name;
	}


	// --- Основные схемы-обертки ---

	record SensorEventAvro {
		string id;
		string hubId;
		@logicalType("timestamp-millis")
		long timestamp;
		union {
			ClimateSensorAvro,
			LightSensorAvro,
			MotionSensorAvro,
			SwitchSensorAvro,
			TemperatureSensorAvro
		} payload;
	}

	record HubEventAvro {
		string hub_id;
		@logicalType("timestamp-millis")
		long timestamp;
		union {
			DeviceAddedEventAvro,
			DeviceRemovedEventAvro,
			ScenarioAddedEventAvro,
			ScenarioRemovedEventAvro
		} payload;
	}
}